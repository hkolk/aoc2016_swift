//: [Previous](@previous)

import Foundation

var str = "Hello, playground"


//let input = "R5, L5, R5, R3"
let input = """
ULL
RRDDD
LURDL
UUUUD
"""
let input2 = """
RDRRDLRRUDRUUUULDDRDUULLDUULDURDDUDRULDLUDDRLRDUDDURRRRURDURLLRDRUUULDLLLURDRLLULLUULULLLDLLLRRURRLRDUULRURRUDRRDRLURLRURLLULRUURRUURDDLDRDLDLLUDUULLLUUUUDULLDRRUURLDURDDDDDRLLRRURDLUDRRUUDLRRLLRDURDUDDDLRDDRDLRULLUULRULRLLULDDRURUUDLDDULDRLLURDDUDDUDRDUDLDRRRDURRLDRDRLDLLDUDDDULULRRULRLLURDRRDDUUUUUULRUDLRRDURDLRDLUDLDURUDDUUURUDLUUULDLRDURDLDUUDLDDDURUUDUUDRLRDULLDUULUDRUDRLRRRDLLDRUDULRRUDDURLDRURRLLRRRDRLLDLULULRRUURRURLLUDRRLRULURLDDDDDURUDRRRRULLUUDLDDLUUL
ULURUDLULDULDLLDDLLLDRRLLUDRRDRDUDURUDLRRRRUDRDDURLRRULLDLURLDULLUDDLUDURDUURRRRLDLRLDDULLRURLULLDDRUDLRRRLDRRRDLDRLLDDRRDDLUUDRUDDLULRURLDURRLLDLRUDLLRRUULUDRLLLRLDULURRRRRDDUURDRRUUDULRUULDDULRLUDLUDDULLRLRDDLRLLURRRULDLRRRUURRLDDRDLRDLRRDRDLDRDUDRDURUUDRLRRULRDLLDLLRRRDRLDRLRLRLLLURURDULUUDDRLLDDDRURRURLRDDULLRURUDRRDRLRRRLDLRLRULDRLUURRUUULRLDLLURLLLDLLLDRRDULRURRRRLUDLLRRUDLRUDRURDRRDLUUURRDLRLRUUUDURDLUDURRUUDURLUDDDULLDRDLLDDDRLDDDRLDLDDDDUDUUDURUUDULRDDLULDRDRLURLUDRDLUULLULRLULRDDRULDUDDURUURULUDLUURLURU
URLURDDRLLURRRLDLDLUDUURDRUDLLLRRDLUUULRRLURRRLUDUDLRLDDRUDLRRRULUDUDLLLULULLLRUDULDDDLLLRRRLRURDULUDDDULDLULURRRDLURDLRLLDUDRUDURDRRURULDRDUDLLRDDDUDDURLUULLULRDRRLDDLDURLRRRLDRDLDULRULRRRLRLLDULRDLURLRUUDURRUUDLLUDRUDLRLDUUDLURRRDDUUDUDRLDLDDRURDDLLDDRDLRLRDLLLUDLUUDRLRLRDDRDLRDLLUULLLLUULLDLLDLRDLRLRRLUUDLLRLRUDRURULRLRLULUDRLLUDDUDDULRLDDRUUUURULDRRULLLDUURULUDRLLURLRRLDLRRLDDRRRDUDDUDLDDLULUDDUURDLLLRLDLRDRUUUUUDDDLDRDDRRRLRURRRRDURDRURUDLURRURDRLRUUDDLDRRULLDURDRLRRDURURUULRDUDLDRDDLULULRDRRUDDRLLRLULRLLUUDRDUUDDUDLRUUDLLUULLRUULUDDLURRRLLDRLRRLLRULLDUULURLLLLUUULDR
LDUURULLRLDRRUUDUUUURUUUDDDURRDDLRDLLRDDRULDDUURUDDURLLUDRDUDRDULDRRRLULUDRULLLLDRLLDRDLDLLRURULUDDDDURDDDRLLUDLDRULRDLDUDDDUUDLLRLLLDLRLRLRRUDDULDDDUDLDDLUDDULDLLLLULLLLDDURDDURRRDDRLRLLUDLLUDDDUDURUDRLRDRULULDDRULDLULULLRUULRLDULUURRDRDRRDLDDDRRLUULDLUDRDDUDLRURULLDDURLDDRULUDLDDDRDRLLRDLLUURRRURDRLRURLDDLURDRURDDURLLRLRUDUUDLDUDURRDDURDRDDUDDDUDUURURDDLLRUUDDRRDULDDLLDLRULUULRUUDLLDRLULDULDDUDLULRULDRLLDUULDDDLRLLRLULDDULDDRRRLDRRLURULRDDRDLRRDUDDRDRRRRUDUDLLRRDRRURRUURDRULDDUDURLUDDURDUDRDUULLDRURUURURDRRLDDLDLUURLULRUDURDRUUURRURRDRUDRUURDURLRULULLLULDLLDLRRLDRDLUULUDDDLRDRLRLDRUDUDRLLRL
LURLUURLURDUUDRUDLDLLURRRDLDRRRULDDRRDRDUUDRUDURDDDURLUDDLULUULRRLLRULUDRDDRRRLDURDUDDURDDDLRLDDLULLDRDDLUUDUURRRLULRUURRRRLLULDUDRDUURRRURRDRDUDUDLUDULLDLDDRLUDRURDULURLURRLLURLLLRLUURLRUDLUDDRLURRUULULRLURRURUDURDLDLDDUDDRDLLRLLRRULDDRUDURUDDDUDLLRDLRUDULLLRRRUURUDUUULLRDUDRURUDULLDLLUUUDRULRLLRRDDDDUDULDRDRLLDDLLDDDURRUDURLDLRDRUURDDURLRDRURLRRLLRLULDRRLRUDURDUURRLUUULUDDDLRLULRDRLLURRRDLURDUUDRRRLUURRLLUDLUDLUULLRRDLLRDDRURRUURLDDLRLRLRUDLDLRLRDRRDLLLRDLRDUDLLDDDRD
"""
//let input = "R8, R4, R4, R8"

enum Direction:Character {
    case up = "U"
    case left = "L"
    case right = "R"
    case down = "D"
    
    static func convert(_ direction:Character) -> Direction {
        let value = Direction(rawValue: direction)
        if(value != nil) { return value! } else { fatalError("Unknown direction") }
    }
}
let moves = input2.split(separator: "\n").map{ Array(String($0)).map{ Direction.convert($0) } }


let lookup = [[7, 8, 9],[4, 5, 6],[1, 2, 3]]
let lookup2 = [
    "2:0": "1",
    "1:-1": "2",
    "1:0": "3",
    "1:1": "4",
    "0:-2": "5",
    "0:-1": "6",
    "0:0": "7",
    "0:1": "8",
    "0:2": "9",
    "-1:-1": "A",
    "-1:0": "B",
    "-1:1": "C",
    "-2:0": "D"
]

struct Coords: Equatable, Hashable {
    let x:Int
    let y:Int
    
    func move(direction:Direction) -> Coords {
        let newCoord:Coords = {
            switch direction {
            case .up:    return Coords(x:self.x, y:self.y+1)
            case .down:  return Coords(x:self.x, y:self.y-1)
            case .left:  return Coords(x:self.x-1, y:self.y)
            case .right: return Coords(x:self.x+1, y:self.y)
        }
        }()
        return (newCoord.isValid()) ? newCoord : self
    }
    
    func isValid() -> Bool {
        return abs(x) + abs(y) <= 2
    }
    
    func getNumber() -> Int {
        return lookup[y+1][x+1]
    }
    
    func getCode() -> String {
        let lookupCode = "\(y):\(x)"
        return lookup2[lookupCode]!
    }
    
    // Hashable
    var hashValue: Int {
        return x << 16 + y
    }
    
    // Equatable
    static func == (lhs: Coords, rhs: Coords) -> Bool {
        return lhs.x == rhs.x && lhs.y == rhs.y
    }
}

var pos = Coords(x: -2, y: 0)
var sequence = Array<Coords>()

//var history = Set<Coords>()

for move in moves {
    for direction in move {
        //print("Doing move \(direction)")
        pos = pos.move(direction: direction)
    }
    //print("Final pos: \(pos)")
    sequence.append(pos)
}
let code = sequence.map { $0.getCode() }.joined()
print("code: \(code)")



//: [Next](@next)

